"use client";

import React, { useEffect, useState, useRef } from "react";
import Head from "next/head";
import Script from "next/script";

export default function PracticeStudio() {
  // Add preload link for AlphaTab
  useEffect(() => {
    const preloadLink = document.createElement('link');
    preloadLink.href = 'https://cdn.jsdelivr.net/npm/@coderline/alphatab@1.6.1/dist/alphaTab.min.js';
    preloadLink.rel = 'preload';
    preloadLink.as = 'script';
    document.head.appendChild(preloadLink);
    
    return () => {
      document.head.removeChild(preloadLink);
    };
  }, []);

  // State for UI
  const [isLoaded, setIsLoaded] = useState(false);
  const [isPlaying, setIsPlaying] = useState(false);
  const [hasFile, setHasFile] = useState(false);
  const [currentSong, setCurrentSong] = useState({
    title: "No score loaded",
    artist: "",
    currentTime: "00:00",
    totalTime: "00:00"
  });
  
  // Refs and core state
  const alphaTabRef = useRef(null);
  const [isScriptsLoaded, setIsScriptsLoaded] = useState(false);
  const [aTick, setATick] = useState(null);
  const [bTick, setBTick] = useState(null);
  const [tracks, setTracks] = useState([]);
  const [alphaTabApi, setAlphaTabApi] = useState(null);
  
  // Control states
  const [countInActive, setCountInActive] = useState(false);
  const [metronomeActive, setMetronomeActive] = useState(false);
  const [autoScroll, setAutoScroll] = useState(true);
  const [speed, setSpeed] = useState("100%");
  
  // Handle script loading
  const handleScriptLoad = () => {
    setIsScriptsLoaded(true);
  };
  
  // Set up core AlphaTab functionality
  useEffect(() => {
    if (!isScriptsLoaded || !alphaTabRef.current) return;
    
    // Initialize AlphaTab
    const settings = {
      player: {
        enablePlayer: true,
        soundFont: "https://cdn.jsdelivr.net/npm/@coderline/alphatab@1.6.1/dist/soundfont/sonivox.sf2",
        scrollElement: window,
        enableCursor: true,
        enableUserInteraction: true,
        enableScrolling: true,
      },
      display: {
        layoutMode: 'page',
        scale: 0.8,
      },
    };
    
    // @ts-ignore - Globally loaded via CDN
    const api = new window.alphaTab.AlphaTabApi(alphaTabRef.current, settings);
    setAlphaTabApi(api);
    
    // Set up event handlers
    api.playerStateChanged.on((args) => {
      setIsPlaying(args.state === 1);
    });
    
    api.playerPositionChanged.on((args) => {
      const currentTime = formatDuration(args.currentTime);
      const totalTime = formatDuration(args.endTime);
      
      setCurrentSong(prev => ({
        ...prev,
        currentTime,
        totalTime
      }));
    });
    
    api.scoreLoaded.on((score) => {
      // Extract and format track info
      const tracksData = score.tracks.map((t) => ({
        name: t.name,
        instrumentName: getInstrumentName(t.playbackInfo.program),
        isPercussion: t.playbackInfo.isPercussion,
        isSolo: false,
        isMuted: false,
      }));
      
      setTracks(tracksData);
      
      // Update song info in React state
      setCurrentSong(prev => ({
        ...prev,
        title: score.title || 'Untitled',
        artist: score.artist || 'Unknown'
      }));
      
      setIsLoaded(true);
      setHasFile(true);
    });

    // Clean up when component unmounts
    return () => {
      if (api) {
        api.destroy();
      }
    };
  }, [isScriptsLoaded]);
  
  // Format time duration from seconds to MM:SS
  const formatDuration = (milliseconds) => {
    const totalSeconds = Math.floor(milliseconds / 1000);
    const minutes = Math.floor(totalSeconds / 60);
    const seconds = totalSeconds % 60;
    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
  };
  
  // Map MIDI program number to instrument name
  const getInstrumentName = (program) => {
    const instruments = [
      "Acoustic Grand Piano", "Bright Acoustic Piano", "Electric Grand Piano", "Honky-tonk Piano", 
      "Electric Piano 1", "Electric Piano 2", "Harpsichord", "Clavinet", 
      "Celesta", "Glockenspiel", "Music Box", "Vibraphone", 
      "Marimba", "Xylophone", "Tubular Bells", "Dulcimer", 
      "Drawbar Organ", "Percussive Organ", "Rock Organ", "Church Organ", 
      "Reed Organ", "Accordion", "Harmonica", "Tango Accordion", 
      "Acoustic Guitar (nylon)", "Acoustic Guitar (steel)", "Electric Guitar (jazz)", "Electric Guitar (clean)", 
      "Electric Guitar (muted)", "Overdriven Guitar", "Distortion Guitar", "Guitar harmonics", 
      "Acoustic Bass", "Electric Bass (finger)", "Electric Bass (pick)", "Fretless Bass", 
      "Slap Bass 1", "Slap Bass 2", "Synth Bass 1", "Synth Bass 2", 
      "Violin", "Viola", "Cello", "Contrabass", 
      "Tremolo Strings", "Pizzicato Strings", "Orchestral Harp", "Timpani", 
      "String Ensemble 1", "String Ensemble 2", "Synth Strings 1", "Synth Strings 2", 
      "Choir Aahs", "Voice Oohs", "Synth Voice", "Orchestra Hit", 
      "Trumpet", "Trombone", "Tuba", "Muted Trumpet", 
      "French Horn", "Brass Section", "Synth Brass 1", "Synth Brass 2", 
      "Soprano Sax", "Alto Sax", "Tenor Sax", "Baritone Sax", 
      "Oboe", "English Horn", "Bassoon", "Clarinet", 
      "Piccolo", "Flute", "Recorder", "Pan Flute", 
      "Blown Bottle", "Shakuhachi", "Whistle", "Ocarina", 
      "Lead 1 (square)", "Lead 2 (sawtooth)", "Lead 3 (calliope)", "Lead 4 (chiff)", 
      "Lead 5 (charang)", "Lead 6 (voice)", "Lead 7 (fifths)", "Lead 8 (bass + lead)", 
      "Pad 1 (new age)", "Pad 2 (warm)", "Pad 3 (polysynth)", "Pad 4 (choir)", 
      "Pad 5 (bowed)", "Pad 6 (metallic)", "Pad 7 (halo)", "Pad 8 (sweep)", 
      "FX 1 (rain)", "FX 2 (soundtrack)", "FX 3 (crystal)", "FX 4 (atmosphere)", 
      "FX 5 (brightness)", "FX 6 (goblins)", "FX 7 (echoes)", "FX 8 (sci-fi)", 
      "Sitar", "Banjo", "Shamisen", "Koto", 
      "Kalimba", "Bag pipe", "Fiddle", "Shanai", 
      "Tinkle Bell", "Agogo", "Steel Drums", "Woodblock", 
      "Taiko Drum", "Melodic Tom", "Synth Drum", "Reverse Cymbal", 
      "Guitar Fret Noise", "Breath Noise", "Seashore", "Bird Tweet", 
      "Telephone Ring", "Helicopter", "Applause", "Gunshot"
    ];
    
    return program >= 0 && program < instruments.length ? instruments[program] : "Unknown";
  };
  
  // Handle file upload
  const handleFileInputChange = async (e) => {
    if (!e.target.files || !e.target.files[0] || !alphaTabApi) return;
    
    const file = e.target.files[0];
    const reader = new FileReader();
    
    reader.onload = (event) => {
      if (event.target && event.target.result) {
        const arrayBuffer = event.target.result;
        alphaTabApi.load(arrayBuffer, [0]);
        setHasFile(true);
      }
    };
    
    reader.onerror = () => {
      console.error('Error reading file');
    };
    
    reader.readAsArrayBuffer(file);
  };
  
  // Play/Pause toggle
  const handlePlay = () => {
    if (!alphaTabApi) return;
    alphaTabApi.play();
  };
  
  const handlePause = () => {
    if (!alphaTabApi) return;
    alphaTabApi.pause();
  };
  
  // Stop playback
  const handleStop = () => {
    if (!alphaTabApi) return;
    alphaTabApi.stop();
  };
  
  // Toggle metronome
  const toggleMetronome = () => {
    if (!alphaTabApi) return;
    
    const newState = !metronomeActive;
    setMetronomeActive(newState);
    alphaTabApi.metronomeVolume = newState ? 1 : 0;
  };
  
  // Toggle count-in
  const toggleCountIn = () => {
    if (!alphaTabApi) return;
    
    const newState = !countInActive;
    setCountInActive(newState);
    alphaTabApi.countInVolume = newState ? 1 : 0;
  };
  
  // Set A/B loop markers
  const setA = () => {
    if (!alphaTabApi) return;
    
    const tick = alphaTabApi.playerState.currentTick;
    setATick(tick);
    
    if (bTick !== null && tick <= bTick) {
      alphaTabApi.playerState.loopRange = { 
        startTick: tick, 
        endTick: bTick 
      };
    }
  };
  
  const setB = () => {
    if (!alphaTabApi) return;
    
    const tick = alphaTabApi.playerState.currentTick;
    setBTick(tick);
    
    if (aTick !== null && tick >= aTick) {
      alphaTabApi.playerState.loopRange = { 
        startTick: aTick, 
        endTick: tick 
      };
    }
  };
  
  const clearAB = () => {
    if (!alphaTabApi) return;
    
    setATick(null);
    setBTick(null);
    alphaTabApi.playerState.loopRange = null;
  };
  
  // Track rendering and playback controls
  const handleTrackRenderToggle = (trackIndex) => {
    if (!alphaTabApi) return;
    
    // Toggle track visibility in score
    const currentTracks = alphaTabApi.tracks.map((t, i) => i === trackIndex ? !t : t);
    alphaTabApi.renderTracks(currentTracks);
  };
  
  const handleSolo = (trackIndex) => {
    if (!alphaTabApi) return;
    
    setTracks(prevTracks => {
      const newTracks = [...prevTracks];
      const isCurrentlySolo = newTracks[trackIndex].isSolo;
      
      // If this track is already solo, un-solo it and unmute all tracks
      if (isCurrentlySolo) {
        newTracks.forEach((t, i) => {
          t.isSolo = false;
          t.isMuted = false;
          if (alphaTabApi.playerState) {
            alphaTabApi.changeTrackSolo(i, false);
            alphaTabApi.changeTrackMute(i, false);
          }
        });
      } 
      // Otherwise, solo this track and mute all others
      else {
        newTracks.forEach((t, i) => {
          if (i === trackIndex) {
            t.isSolo = true;
            t.isMuted = false;
            if (alphaTabApi.playerState) {
              alphaTabApi.changeTrackSolo(i, true);
              alphaTabApi.changeTrackMute(i, false);
            }
          } else {
            t.isSolo = false;
            t.isMuted = true;
            if (alphaTabApi.playerState) {
              alphaTabApi.changeTrackSolo(i, false);
              alphaTabApi.changeTrackMute(i, true);
            }
          }
        });
      }
      
      return newTracks;
    });
  };
  
  const handleMute = (trackIndex) => {
    if (!alphaTabApi) return;
    
    setTracks(prevTracks => {
      const newTracks = [...prevTracks];
      const track = newTracks[trackIndex];
      track.isMuted = !track.isMuted;
      
      if (alphaTabApi.playerState) {
        alphaTabApi.changeTrackMute(trackIndex, track.isMuted);
      }
      
      return newTracks;
    });
  };

  const formatTick = (tick) => {
    if (tick === null) return '—';
    
    const quarters = tick / 960;
    const bars = Math.floor(quarters / 4) + 1;
    const beats = Math.floor(quarters % 4) + 1;
    return `${bars}.${beats}`;
  };

  // Toggle auto-scroll
  const toggleAutoScroll = () => {
    if (!alphaTabApi) return;
    
    const newState = !autoScroll;
    setAutoScroll(newState);
    alphaTabApi.settings.player.enableScrolling = newState;
  };
  
  // Change playback speed
  const changePlaybackSpeed = (e) => {
    if (!alphaTabApi) return;
    
    const speed = parseFloat(e.target.value);
    if (!isNaN(speed)) {
      alphaTabApi.playbackSpeed = speed;
      setSpeed(`${speed * 100}%`);
    }
  };

  return (
    <div className="flex flex-col h-screen bg-[#010d1f]">
      {/* Custom CSS for styling */}
      <style jsx global>{`
        body {
          margin: 0;
          padding: 0;
          background: #010d1f;
          color: #fff;
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        }
        
        .at-cursor-bar {
          background: rgba(255,242,0,.22);
        }
        .at-cursor-beat {
          background: rgba(64,255,160,.95);
          width: 5px;
        }
        
        /* Hide AlphaTab brand watermark */
        #alphaTab .at-brand,
        #alphaTab text.at-brand,
        #alphaTab g.at-brand {
          display: none !important;
        }
      `}</style>
      
      {/* Main Header - Exact match to screenshot */}
      <div className="bg-[#010d1f] border-b border-[#102040] px-3 py-2 flex items-center flex-wrap gap-2 sticky top-0 z-10">
        <h2 className="text-white font-bold mr-4">Upkraft</h2>
        
        <div className="flex items-center">
          <button className="bg-[#102040] hover:bg-[#1b2c4f] text-white py-1 px-3 rounded mr-1">
            Choose File
            <input 
              type="file" 
              id="fileInput" 
              className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
              onChange={handleFileInputChange}
              accept=".gp,.gp3,.gp4,.gp5,.gpx,.musicxml,.xml,.mid,.midi"
            />
          </button>
          <span className="text-[#a6b7d1] text-sm mr-4">
            {hasFile ? 'File selected' : 'no file selected'}
          </span>
        </div>
        
        <button 
          onClick={handlePlay}
          disabled={!hasFile || isPlaying}
          className="bg-[#102040] hover:bg-[#1b2c4f] border border-[#1d2946] text-white py-1 px-3 rounded mr-1 disabled:opacity-50"
        >
          ▶ Play
        </button>
        
        <button 
          onClick={handlePause}
          disabled={!hasFile || !isPlaying}
          className="bg-[#102040] hover:bg-[#1b2c4f] border border-[#1d2946] text-white py-1 px-3 rounded mr-1 disabled:opacity-50"
        >
          ⏸ Pause
        </button>
        
        <button 
          onClick={handleStop}
          disabled={!hasFile}
          className="bg-[#102040] hover:bg-[#1b2c4f] border border-[#1d2946] text-white py-1 px-3 rounded mr-4 disabled:opacity-50"
        >
          ⏹ Stop
        </button>
        
        <div className="flex items-center mr-4">
          <span className="text-[#a6b7d1] mr-2">Speed</span>
          <select 
            onChange={changePlaybackSpeed}
            disabled={!hasFile}
            className="bg-[#102040] text-white border border-[#1d2946] rounded p-1"
            defaultValue="1"
          >
            <option value="0.5">50%</option>
            <option value="0.75">75%</option>
            <option value="1">100%</option>
            <option value="1.25">125%</option>
            <option value="1.5">150%</option>
          </select>
        </div>
        
        <div className="flex items-center mr-4">
          <input 
            type="checkbox" 
            checked={autoScroll} 
            onChange={toggleAutoScroll}
            disabled={!hasFile}
            className="mr-1" 
          />
          <span className="text-[#a6b7d1]">Auto-Scroll</span>
        </div>
        
        <button 
          className={`bg-[#102040] hover:bg-[#1b2c4f] border border-[#1d2946] text-white py-1 px-3 rounded mr-1 ${countInActive ? 'bg-[#294d7f]' : ''}`}
          onClick={toggleCountIn}
          disabled={!hasFile}
        >
          Count-In
        </button>
        
        <button 
          className={`bg-[#102040] hover:bg-[#1b2c4f] border border-[#1d2946] text-white py-1 px-3 rounded mr-4 ${metronomeActive ? 'bg-[#294d7f]' : ''}`}
          onClick={toggleMetronome}
          disabled={!hasFile}
        >
          Metronome
        </button>
        
        <div className="flex items-center mr-2 text-[#a6b7d1]">
          <span>Loop A/B:</span>
          <button onClick={setA} disabled={!hasFile} className="text-[#4a89dc] mx-1">Set A</button>
          <span>•</span>
          <button onClick={setB} disabled={!hasFile} className="text-[#4a89dc] mx-1">Set B</button>
          <span>•</span>
          <button onClick={clearAB} disabled={!hasFile} className="text-[#4a89dc] mx-1">Clear</button>
        </div>
        
        <div className="text-[#a6b7d1] mr-2">
          A: {formatTick(aTick)} | B: {formatTick(bTick)}
        </div>
        
        <div className="text-[#a6b7d1] mr-2">
          {currentSong.currentTime} / {currentSong.totalTime}
        </div>
        
        <div className="text-[#a6b7d1] overflow-hidden whitespace-nowrap text-ellipsis" style={{maxWidth: '200px'}}>
          {hasFile ? `${currentSong.title} — ${currentSong.artist}` : 'No score loaded'}
        </div>
      </div>

      {/* Main content area with sidebar and visualizer */}
      <div className="grid grid-cols-12 h-full">
        {/* Left sidebar - Instruments */}
        <div className="col-span-3 lg:col-span-2 bg-[#010d1f] border-r border-[#102040]">
          <h3 className="p-3 text-sm font-medium text-[#a6b7d1]">Instruments</h3>
          {hasFile ? (
            <div>
              {tracks.map((track, idx) => (
                <div 
                  key={idx} 
                  className="border-b border-[#102040] flex items-center gap-3 p-2 hover:bg-[#0f1a2a]" 
                >
                  <input 
                    type="checkbox" 
                    className="render"
                    onChange={() => handleTrackRenderToggle(idx)}
                    defaultChecked={idx === 0}
                  />
                  <div className="flex-1">
                    <div className="text-white font-medium">{track.name || `Track ${idx + 1}`}</div>
                    <small className="text-[#a6b7d1]">{track.isPercussion ? "Percussion" : track.instrumentName}</small>
                  </div>
                  <div className="flex gap-1">
                    <button 
                      className={`text-xs px-2 py-1 bg-[#0f1a2a] hover:bg-[#1b2c4f] text-white border border-[#1d2946] rounded ${track.isSolo ? 'bg-[#294d7f]' : ''}`}
                      onClick={() => handleSolo(idx)}
                    >
                      Solo
                    </button>
                    <button 
                      className={`text-xs px-2 py-1 bg-[#0f1a2a] hover:bg-[#1b2c4f] text-white border border-[#1d2946] rounded ${track.isMuted ? 'bg-[#294d7f]' : ''}`}
                      onClick={() => handleMute(idx)}
                    >
                      Mute
                    </button>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="p-4 text-center text-[#a6b7d1]">
              No instruments to display
            </div>
          )}
        </div>

        {/* Main Content Area - AlphaTab container */}
        <div className="col-span-9 lg:col-span-10 bg-white">
          {hasFile ? (
            <div id="alphaTab" ref={alphaTabRef} className="w-full h-full overflow-auto">
              {!isScriptsLoaded && (
                <div className="flex items-center justify-center h-full bg-[#f5f5f5]">
                  <div className="text-gray-500">Loading music visualizer...</div>
                </div>
              )}
            </div>
          ) : (
            <div className="flex items-center justify-center h-full bg-white">
              <div className="text-center">
                <div className="text-xl font-semibold text-gray-800 mb-2">Upload a music file to begin</div>
                <div className="text-gray-600 mb-6">
                  Supported formats: Guitar Pro (.gp, .gp3, .gp4, .gp5, .gpx), 
                  MusicXML (.musicxml, .xml), MIDI (.mid, .midi)
                </div>
                <label className="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded cursor-pointer">
                  Choose File
                  <input 
                    type="file" 
                    className="hidden"
                    onChange={handleFileInputChange}
                    accept=".gp,.gp3,.gp4,.gp5,.gpx,.musicxml,.xml,.mid,.midi"
                  />
                </label>
              </div>
            </div>
          )}
        </div>
      </div>
      
      {/* AlphaTab Scripts */}
      <Script 
        src="https://cdn.jsdelivr.net/npm/@coderline/alphatab@1.6.1/dist/alphaTab.min.js"
        onLoad={handleScriptLoad}
        strategy="beforeInteractive"
      />
    </div>
  );
}
